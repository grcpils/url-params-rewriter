{"version":3,"sources":["url-rewriter.js"],"names":["urlCurrentParam","getAllUrlParams","urlRewriterItems","document","getElementsByClassName","regex","_iterator","s","_step","n","done","item","value","urlParam","href","urlBase","match","newUrlParam","_objectSpread","console","error","concat","urlParamConstructor","url","params","key","newUrl","first","queryString","split","window","location","search","slice","arr","i","length","a","paramName","paramValue","toLowerCase","obj","replace","index","exec","push"],"mappings":"y3DAAA,I,MAAAA,gBAAAC,kBACAC,iBAAAC,SAAAC,uBAAA,gBACAC,MAAA,mC,qCAEAH,kB,IAAA,IAAAI,UAAAC,MAAAC,MAAAF,UAAAG,KAAAC,MAAA,CAAA,IAAAC,KAAAH,MAAAI,MACAC,SAAAZ,gBAAAU,KAAAG,MACAC,QAAAJ,KAAAG,KAAAE,MAAAX,OACAY,YAAAC,cAAAA,cAAA,GAAAL,UAAAb,iBACA,MAAAe,SACAI,QAAAC,MAAA,gBAAAC,OAAAV,KAAAG,KAAA,+FAEAH,KAAAG,KAAAQ,oBAAAP,QAAA,GAAAE,c,8CAXA,SAAAK,oBAAAC,EAAAC,GACA,IAgBAC,EAhBAC,EAAAH,EACAI,GAAA,EAeA,IAAAF,KAAAD,GACA,IAAAG,GACAD,EAAAA,EAAA,IAAAD,EAAA,IAAAD,EAAAC,GACAE,GAAA,GAhBAD,EAAAA,EAAA,IAAAD,EAAA,IAAAD,EAAAC,GAEA,OAAAC,EAsBA,SAAAzB,gBAAAsB,GApBA,IAAAK,EAAAL,EAAAA,EAAAM,MAAA,KAAA,GAAAC,OAAAC,SAAAC,OAAAC,MAAA,GACAd,EAAAA,GAuBA,GAAAS,EAIA,IAxBA,IAAAM,GADAvB,EAAAA,EAAAA,MAAAA,KAAAA,IACAkB,MAAA,KAwBAM,EAAA,EAAAA,EAAAD,EAAAE,OAAAD,IAAA,CACA,IApBAV,EAoBAY,EAAAH,EAAAC,GAAAN,MAAA,KACAS,EAAAD,EAAA,GACAE,OAAA,IAAAF,EAAA,IAAAA,EAAA,GAzBAC,EAAAA,EAAAE,cACA,iBAAAD,IAAAA,EAAAA,EAAAC,eA6BAF,EAAAtB,MAAA,gBA1BAyB,EADAhB,EAAAa,EAAAI,QAAA,aAAA,OACAD,EAAAhB,GAAA,IAEAE,EAAAA,MAAAA,aACAgB,EAAA,YAAAC,KAAAN,GAAA,GACAZ,EAAAA,GAAAA,GAAAA,GAEAe,EAAAhB,GAAAoB,KAAAN,IAEAE,EAAAH,IAEAG,EAAAH,IAAA,iBAAAG,EAAAH,KACAG,EAAAH,GAAA,CAAAG,EAAAH,KACAG,EAAAH,GAAAO,KAAAN,IA0BAE,EAAAH,GAAAC,EAnBA,OAAAE","file":"url-rewriter.min.js","sourcesContent":["var urlCurrentParam = getAllUrlParams();\nvar urlRewriterItems = document.getElementsByClassName('url-rewriter');\nconst regex = \"^(https|http)\\:\\/\\/[a-zA-Z0-9.\\/:]*\\/\";\n\nfor (var item of urlRewriterItems) {\n  var urlParam = getAllUrlParams(item.href);\n  var urlBase = item.href.match(regex);\n  var newUrlParam = {...urlParam, ...urlCurrentParam};\n  if (urlBase == null) {\n    console.error(`base url for ${item.href} is not correct or doesn't match the correct patern ! (/^(https|http)\\:\\/\\/[a-zA-Z0-9.\\/:]*\\//)`);\n  }\n  item.href = urlParamConstructor(urlBase[0], newUrlParam);\n}\n\nfunction urlParamConstructor(url, params) {\n  var newUrl = url;\n  var first = true;\n  for (var key in params) {\n    if (first === true) {\n      newUrl = newUrl + \"?\" + key + \"=\" + params[key];\n      first = false\n    } else {\n      newUrl = newUrl + \"&\" + key + \"=\" + params[key];\n    }\n  }\n  return newUrl;\n}\n\nfunction getAllUrlParams(url) {\n  var queryString = url ? url.split('?')[1] : window.location.search.slice(1);\n  var obj = {};\n  \n  if (queryString) {\n    queryString = queryString.split('#')[0];\n    var arr = queryString.split('&');\n    \n    for (var i = 0; i < arr.length; i++) {\n      var a = arr[i].split('=');\n      var paramName = a[0];\n      var paramValue = typeof (a[1]) === 'undefined' ? true : a[1];\n      \n      paramName = paramName.toLowerCase();\n      if (typeof paramValue === 'string') paramValue = paramValue.toLowerCase();\n      \n      if (paramName.match(/\\[(\\d+)?\\]$/)) {\n        var key = paramName.replace(/\\[(\\d+)?\\]/, '');\n        if (!obj[key]) obj[key] = [];\n        \n        if (paramName.match(/\\[\\d+\\]$/)) {\n          var index = /\\[(\\d+)\\]/.exec(paramName)[1];\n          obj[key][index] = paramValue;\n        } else {\n          obj[key].push(paramValue);\n        }\n      } else {\n        if (!obj[paramName]) {\n          obj[paramName] = paramValue;\n        } else if (obj[paramName] && typeof obj[paramName] === 'string'){\n          obj[paramName] = [obj[paramName]];\n          obj[paramName].push(paramValue);\n        } else {\n          obj[paramName].push(paramValue);\n        }\n      }\n    }\n  }\n  return obj;\n}"]}